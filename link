#!/usr/bin/perl

use strict;
use warnings;

use Config::GitLike;
use FindBin qw($Bin);
use File::Copy;
use Switch;
use Data::Dumper;

our $VERSION = "2.0alpha1";

my @args = @ARGV;

my $config = Config::GitLike->new(confname => 'hmlnrc');
my $gitmod = Config::GitLike->new(confname => 'gitmodules');
my $gitcfg = Config::GitLike->new(confname => 'git/config');
my $backup = "~/.dotfile.bak";
my $debug = $config->get( key => 'hmln.debug', as => 'bool', );

if ($debug) {
    print "-- Debug Enabled --\n";
    print "args: "; foreach (@args) { print "$_ " }; print "\n";
    print "      ".scalar @args."\n";
    print $config->dump."\n";
    my %temp = $config->dump;
    print Dumper %temp;
};

sub _help {
    print "hmln -- v.$VERSION\n";
    print "\n";
    print "One of the following subcommands are required, and exclusionary.\n";
    print "\n";
    print "\tadd <url> [link target]\n";
    print "\t\tAdd the git repository at specified url to the hmln config, add\n";
    print "\t\tit as a submodule, and link it into place, as near as we can\n";
    print "\t\tguess.\n";
    print "\tls\n";
    print "\t\tList currently selected git submodules.\n";
    print "\tinit\n";
    print "\t\tRead the config file and create a .gitconfig file, run\n";
    print "\t\t`git submodule init' and `git submodule update', then create\n";
    print "\t\tsymbolic links as specified. -- Not yet implemented.\n";
    print "\tupdate\n";
    print "\t\tUpdate all the submodules contained in the dotfile directory.\n";
    print "\thelp\n";
    print "\t\tPrint this message.\n";
    print "\trm\n";
    print "\t\tRemove a submodule. -- Not yet implemented.\n";
    print "\n";
    print "Project homepage is http://www.hdonnay.com/projects/hmln\n";
    exit 0;
}

sub _add {
    if ($debug) {print "begin add\n"};

    if (scalar @args < 2 ) {
        _help;
    };
    my $link;
    my @command = ( "git", "submodule", "add", "$args[1]" );
    system(@command);
    if ($debug) {print "$args[1]\n"};
    my $folder = $args[1];
    $folder =~ /.*\/(.+?)\.git/;
    $folder = $1;
    if ($debug) {print "$folder\n"};
    if (exists $args[2]) {
        $link = $args[2];
    }
    else {
        $link = "~/.".$folder;
    };
    if ($debug) {print "$link\n"};
    if ( -e $link ) {
        if ( -l $link ) {
            unlink $link;
        } else {
            mkdir $backup, 0755 unless -d $backup;
            move $link, $backup."/".$link;
        };
    };
    symlink $folder, $link;
    if ($debug) {print "linking done, write config.\n"};
    $config->group_set(
        ${ $config->config_files }[-1],
        [
            {key => "submodule.$folder.url",
            value => $args[1]},
            {key => "submodule.$folder.path",
            value => $folder},
            {key => "submodule.$folder.link",
            value => $link},
        ]
    );
    if ($debug) {$config->load; print $config->dump."\n"; };
    exit 0;
}

sub _list {
    my %output = $config->get_regexp(
        key => "submodule\.(.+?)\.path",
    );
    foreach (sort keys %output) {
        print " $output{$_}\n";
    };
    exit 0;
}

sub _init {
    if ( -e "$Bin/.gitmodules" ) {
        if ($debug) { print "$Bin/.gitmodules exists.\n" };
        # should compare gitmodules to hmln config, and add modules as needed.
    } elsif ($config->get_regex( key => "submodule\.(.+)", as => 'bool' )) {
        if ($debug) { print "$Bin/.gitmodules does not exist, looking at hmln config for submodules.\n" };
        # gitmodules doesn't exist, do some adding.
    } else {
        if ($debug) { print "$Bin/.gitmodules doesn not exist, no submodules found in hmln config.\n" };
        print "Your config doesn\'t seem to have any submodules in it.\n
               Use `./link add <url> [target]' to add some.\n";
    }
    exit 0;
}

sub _remove {
    if ($debug) {print "begin remove\n"};

    if (scalar @args < 1 ) {
        _help;
    };

    print "!!\tThe following process will modify your .gitmodules and\n.git/config files.\n\n
           Please type \'yes\' to continue, or anything else to abort:\t";
    my $confirm = <>;
    if ($debug) { print "confirm value: $confirm\n"; };
    if ($confirm =~ m/!(^yes$)/i) {
        if ($debug) { print "regex no match\n"; };
        exit 0;
    }
    if ($debug) {print "regex match\n"};
    #do some deleting
}

sub _update {
    if ($debug) {print "begin update\n"};

    if (scalar @args > 1) {
        print "+Extra arguments supplied, ignoring.\n";
    };
    my @command = ("git", "submodule", "update", "--init");
    system(@command);
    exit 0;
}

if ($debug) {print "switch: $args[0]\n"};

switch ($args[0]) {
    case "help"   { _help }
    case "rm"     { _help }
    case "add"    { _add }
    case "ls"     { _list }
    case "update" { _update }
    case "init"   { _help }
    else          { _help }
}
